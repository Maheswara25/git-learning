Change the user
# sudo sudo

Goto root dir
# cd

Change the host name 
# hostname Jenkins-Docker
# exec bash

Update the packages
# apt-get update

Install java 
# sudo apt install openjdk-17-jre


Check the java version
# java --version


Update the packages again 
# sudo apt update -y


Follow this steps to install jenkins
# curl -fsSL https://pkg.jenkins.io/debian-stable/jenkins.io-2023.key | sudo tee \
  /usr/share/keyrings/jenkins-keyring.asc > /dev/null

# echo deb [signed-by=/usr/share/keyrings/jenkins-keyring.asc] \
  https://pkg.jenkins.io/debian-stable binary/ | sudo tee \
  /etc/apt/sources.list.d/jenkins.list > /dev/null

# sudo apt-get update

# sudo apt-get install jenkins

# sudo systemctl start jenkins.service

# sudo systemctl status jenkins



Login to jenkins from browser 
# public ip:8080



Get the password from command line 
# cat /var/lib/jenkins/secrets/initialAdminPassword



Follow below steps to install docker
# sudo apt update -y

# sudo apt install apt-transport-https ca-certificates curl software-properties-common -y

# curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add -

# sudo add-apt-repository "deb [arch=amd64] https://download.docker.com/linux/ubuntu bionic stable" -y

# sudo apt update -y

# apt-cache policy docker-ce -y

# sudo apt install docker-ce -y

# sudo systemctl status docker 

# sudo chmod 777 /var/run/docker.sock


Install maven
# wget https://dlcdn.apache.org/maven/maven-3/3.9.3/binaries/apache-maven-3.9.3-bin.tar.gz
# tar -xvzf apache-maven-3.9.3-bin.tar.gz
# mv apache-maven-3.9.3/ /opt/

vi ~/.bash_profile

M2_HOME='/opt/apache-maven-3.9.3'
PATH="$M2_HOME/bin:$PATH"
export PATH


Install required plugins in jenkins
# build pipeline
# pipeline timeline
# Dashboard for Blue Ocean
# dashboard view
# environment dashboard
# maven intigration
# docker pipeline
# deploy to container
# docker


# check out from version control
# bind credentials to variable 


Step1:
On Master & Worker node
# sudo su
# apt-get update
# apt-get install docker.io -y
# service docker restart
# curl -s https://packages.cloud.google.com/apt/doc/apt-key.gpg | apt-key add -
# echo "deb http://apt.kubernetes.io/ kubernetes-xenial main" >/etc/apt/sources.list.d/kubernetes.list
# apt-get update
# apt install kubeadm=1.20.0-00 kubectl=1.20.0-00 kubelet=1.20.0-00 -y

Step2:
On Master
# kubeadm init --pod-network-cidr=192.168.0.0/16
> Copy the token and paste it into worker node.

Step3:
On Master
# mkdir -p $HOME/.kube
# sudo cp -i /etc/kubernetes/admin.conf $HOME/.kube/config
# sudo chown $(id -u):$(id -g) $HOME/.kube/config

Step4:
On Master
# kubectl apply -f https://docs.projectcalico.org/manifests/calico.yaml
# kubectl apply -f https://raw.githubusercontent.com/kubernetes/ingress-nginx/controller-v0.49.0/deploy/static/provider/baremetal/deploy.yaml


pipeline {
    agent any
    tools{
        maven 'maven'
    }
    stages{
        stage('Build Maven'){
            steps{
                checkout scmGit(branches: [[name: '*/main']], extensions: [], userRemoteConfigs: [[url: 'https://github.com/vemareddymaheswara/node_project.git']])
            }
        }
        stage('Build Docker Image'){
            steps{
                script{
                    sh 'docker build -t babu8050796070/nodejs-image-demo .'
                }
            }
        }
        stage('Push Image To Docker Hub'){
            steps{
                script{
                    withCredentials([string(credentialsId: 'dockerpwd', variable: 'dockerhubpwd')]) {
                    sh 'docker login -u babu8050796070 -p ${dockerhubpwd}'
                    
                    }
                    sh 'docker push babu8050796070/nodejs-image-demo'
                }
            }
        }
        stage('Deploy to k8s'){
            steps{
                script{
                    kubernetesDeploy (configs: 'deploymentservice.yaml',kubeconfigId: 'kubeconfig')
                }
            }
        }
        
    }
}





